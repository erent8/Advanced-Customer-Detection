"""
OpenCV M√º≈üteri Analiz Sistemi - Modern Flask Web App
Geli≈ümi≈ü web dashboard ile uzaktan eri≈üim ve mobile support
"""

from flask import Flask, render_template, request, jsonify, Response, send_file
from flask_socketio import SocketIO, emit
import cv2
import base64
import threading
import json
import time
from datetime import datetime, timedelta
import logging
from pathlib import Path
import pandas as pd
import io
import sqlite3
import os

# Existing system imports
from src.core.camera import CameraManager
from src.core.detector import HumanDetector
from src.core.visitor_tracker import visitor_tracker
from src.models.database import db_manager
from src.utils.logger import get_logger
from src.config.settings import SETTINGS

class ModernWebApp:
    """Modern Flask Web Application for Customer Analytics"""
    
    def __init__(self):
        # Flask app setup
        self.app = Flask(__name__, 
                         template_folder='templates',
                         static_folder='static')
        self.app.config['SECRET_KEY'] = 'customer_analytics_2025_secret'
        
        # WebSocket support
        self.socketio = SocketIO(self.app, cors_allowed_origins="*", async_mode='threading')
        
        # System components
        self.camera_manager = CameraManager()
        self.human_detector = HumanDetector()
        self.is_system_running = False
        
        # Video streaming
        self.current_frame = None
        self.frame_lock = threading.Lock()
        
        # Analytics data
        self.hourly_stats = {}
        self.daily_trends = []
        
        # Logging
        self.logger = get_logger("webapp")
        
        # Setup routes and websockets
        self._setup_routes()
        self._setup_websockets()
        
        self.logger.info("üåê Modern Web App ba≈ülatƒ±ldƒ±")
    
    def _setup_routes(self):
        """Setup Flask routes"""
        
        @self.app.route('/')
        def dashboard():
            """Ana dashboard sayfasƒ±"""
            return render_template('modern_dashboard.html')
        
        @self.app.route('/mobile')
        def mobile_dashboard():
            """Mobile optimized dashboard"""
            return render_template('mobile_dashboard.html')
        
        @self.app.route('/analytics')
        def analytics_page():
            """Detaylƒ± analiz sayfasƒ±"""
            return render_template('analytics.html')
        
        # API Routes
        @self.app.route('/api/system/start', methods=['POST'])
        def start_system():
            """Sistemi ba≈ülat"""
            try:
                if self.is_system_running:
                    return jsonify({'success': False, 'message': 'Sistem zaten √ßalƒ±≈üƒ±yor'})
                
                # Kamera ba≈ülat
                if not self.camera_manager.initialize_camera():
                    return jsonify({'success': False, 'message': 'Kamera ba≈ülatƒ±lamadƒ±'})
                
                # Detector ba≈ülat
                if not self.human_detector.initialize():
                    return jsonify({'success': False, 'message': 'AI model y√ºklenemedi'})
                
                # Kamera yakalamayƒ± ba≈ülat
                self.camera_manager.start_capture()
                self.camera_manager.add_frame_callback(self._process_frame)
                
                self.is_system_running = True
                
                # WebSocket ile durumu bildir
                self.socketio.emit('system_status', {
                    'running': True, 
                    'message': 'Sistem ba≈ülatƒ±ldƒ±'
                })
                
                return jsonify({'success': True, 'message': 'Sistem ba≈üarƒ±yla ba≈ülatƒ±ldƒ±'})
                
            except Exception as e:
                self.logger.error(f"Sistem ba≈ülatma hatasƒ±: {e}")
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/system/stop', methods=['POST'])
        def stop_system():
            """Sistemi durdur"""
            try:
                if not self.is_system_running:
                    return jsonify({'success': False, 'message': 'Sistem zaten durdurulmu≈ü'})
                
                self.camera_manager.stop_capture()
                self.human_detector.cleanup()
                self.is_system_running = False
                
                # WebSocket ile durumu bildir
                self.socketio.emit('system_status', {
                    'running': False, 
                    'message': 'Sistem durduruldu'
                })
                
                return jsonify({'success': True, 'message': 'Sistem durduruldu'})
                
            except Exception as e:
                self.logger.error(f"Sistem durdurma hatasƒ±: {e}")
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/stats/current')
        def get_current_stats():
            """Mevcut istatistikleri getir"""
            try:
                stats = visitor_tracker.get_current_stats()
                
                # Ek istatistikler ekle
                today_visitors = db_manager.get_today_stats()
                
                response_data = {
                    'total_today': today_visitors.get('total_visitors', 0),
                    'avg_confidence': today_visitors.get('avg_confidence', 0.0),
                    'last_visit': today_visitors.get('last_visit'),
                    'system_running': self.is_system_running,
                    'current_detections': getattr(self, 'current_detections', 0),
                    'hourly_data': self._get_hourly_distribution(),
                    'weekly_trend': self._get_weekly_trend()
                }
                
                return jsonify({'success': True, 'data': response_data})
                
            except Exception as e:
                self.logger.error(f"Stats getirme hatasƒ±: {e}")
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/stats/hourly')
        def get_hourly_stats():
            """Saatlik istatistikleri getir"""
            try:
                hourly_data = self._get_hourly_distribution()
                return jsonify({'success': True, 'data': hourly_data})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/stats/weekly')
        def get_weekly_stats():
            """Haftalƒ±k istatistikleri getir"""
            try:
                weekly_data = self._get_weekly_trend()
                return jsonify({'success': True, 'data': weekly_data})
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/visitors/recent')
        def get_recent_visitors():
            """Son ziyaret√ßileri getir"""
            try:
                # Son 20 ziyaret√ßiyi getir
                conn = sqlite3.connect('data/musteri_analiz.db')
                query = """
                    SELECT entry_time, confidence_avg, detection_count 
                    FROM visitors 
                    WHERE confidence_avg > 0.0 
                    ORDER BY entry_time DESC 
                    LIMIT 20
                """
                df = pd.read_sql_query(query, conn)
                conn.close()
                
                visitors = []
                for _, row in df.iterrows():
                    visitors.append({
                        'time': row['entry_time'],
                        'confidence': round(row['confidence_avg'] * 100, 1),
                        'detection_count': row['detection_count']
                    })
                
                return jsonify({'success': True, 'data': visitors})
                
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/api/visitors/export')
        def export_visitors():
            """Ziyaret√ßi verilerini export et"""
            try:
                # Enhanced export kullan
                import subprocess
                result = subprocess.run(['python', 'enhanced_data_export.py'], 
                                      capture_output=True, text=True)
                
                if result.returncode == 0:
                    # En son olu≈üturulan dosyayƒ± bul
                    import glob
                    files = glob.glob('data/csv_backups/enhanced_visitor_data_*.csv')
                    if files:
                        latest_file = max(files, key=os.path.getctime)
                        return send_file(latest_file, as_attachment=True)
                
                return jsonify({'success': False, 'message': 'Export ba≈üarƒ±sƒ±z'})
                
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
        
        @self.app.route('/video_feed')
        def video_feed():
            """Video stream endpoint"""
            return Response(self._generate_frames(),
                          mimetype='multipart/x-mixed-replace; boundary=frame')
        
        @self.app.route('/api/camera/snapshot')
        def camera_snapshot():
            """Anlƒ±k kamera g√∂r√ºnt√ºs√º"""
            try:
                if self.current_frame is not None:
                    with self.frame_lock:
                        frame = self.current_frame.copy()
                    
                    # JPEG encode
                    _, buffer = cv2.imencode('.jpg', frame)
                    
                    return Response(buffer.tobytes(), mimetype='image/jpeg')
                else:
                    return jsonify({'success': False, 'message': 'Kamera aktif deƒüil'})
                    
            except Exception as e:
                return jsonify({'success': False, 'message': str(e)})
    
    def _setup_websockets(self):
        """Setup WebSocket events"""
        
        @self.socketio.on('connect')
        def handle_connect():
            """Client baƒülandƒ±ƒüƒ±nda"""
            self.logger.info(f"Web client baƒülandƒ±: {request.sid}")
            emit('connection_status', {'status': 'connected'})
            
            # Mevcut durumu g√∂nder
            stats = visitor_tracker.get_current_stats()
            emit('stats_update', stats)
        
        @self.socketio.on('disconnect')
        def handle_disconnect():
            """Client baƒülantƒ±sƒ± kesildiƒüinde"""
            self.logger.info(f"Web client baƒülantƒ±sƒ± kesildi: {request.sid}")
        
        @self.socketio.on('request_stats')
        def handle_stats_request():
            """ƒ∞statistik g√ºncellemesi istendi"""
            try:
                stats = visitor_tracker.get_current_stats()
                stats['current_detections'] = getattr(self, 'current_detections', 0)
                stats['system_running'] = self.is_system_running
                emit('stats_update', stats)
            except Exception as e:
                self.logger.error(f"Stats g√∂nderme hatasƒ±: {e}")
        
        @self.socketio.on('request_hourly_data')
        def handle_hourly_request():
            """Saatlik veri istendi"""
            try:
                hourly_data = self._get_hourly_distribution()
                emit('hourly_update', hourly_data)
            except Exception as e:
                self.logger.error(f"Hourly data g√∂nderme hatasƒ±: {e}")
    
    def _process_frame(self, frame):
        """Frame i≈üleme callback'i"""
        if frame is None:
            return
        
        try:
            # ƒ∞nsan tespiti yap
            detections, processed_frame = self.human_detector.detect_humans(frame, draw_boxes=True)
            
            # Anlƒ±k tespit sayƒ±sƒ±nƒ± g√ºncelle
            self.current_detections = len(detections) if detections else 0
            
            # Processed frame'i sakla
            with self.frame_lock:
                self.current_frame = processed_frame.copy()
            
            # Ziyaret√ßi takibi
            if detections and len(detections) > 0:
                tracking_result = visitor_tracker.process_detections(detections, datetime.now())
                
                # Yeni ziyaret√ßi varsa WebSocket ile bildir
                if tracking_result['new_visitors'] > 0:
                    self.socketio.emit('new_visitor', {
                        'count': tracking_result['new_visitors'],
                        'total_today': tracking_result['current_stats']['total_today']
                    })
                
                # Stats g√ºncelle
                stats = tracking_result['current_stats']
                stats['current_detections'] = self.current_detections
                stats['system_running'] = self.is_system_running
                
                self.socketio.emit('stats_update', stats)
            
        except Exception as e:
            self.logger.error(f"Frame i≈üleme hatasƒ±: {e}")
    
    def _generate_frames(self):
        """Video stream generator"""
        while True:
            try:
                if self.current_frame is not None:
                    with self.frame_lock:
                        frame = self.current_frame.copy()
                    
                    # JPEG encode
                    _, buffer = cv2.imencode('.jpg', frame, [cv2.IMWRITE_JPEG_QUALITY, 85])
                    
                    yield (b'--frame\r\n'
                           b'Content-Type: image/jpeg\r\n\r\n' + buffer.tobytes() + b'\r\n')
                else:
                    # Placeholder image
                    time.sleep(0.1)
                    
            except Exception as e:
                self.logger.error(f"Frame generation hatasƒ±: {e}")
                time.sleep(0.1)
    
    def _get_hourly_distribution(self):
        """Saatlik daƒüƒ±lƒ±m verilerini getir"""
        try:
            conn = sqlite3.connect('data/musteri_analiz.db')
            today = datetime.now().date()
            
            query = """
                SELECT strftime('%H', entry_time) as hour, COUNT(*) as count
                FROM visitors 
                WHERE DATE(entry_time) = ? AND confidence_avg > 0.0
                GROUP BY hour
                ORDER BY hour
            """
            
            df = pd.read_sql_query(query, conn, params=[str(today)])
            conn.close()
            
            # 24 saatlik veri hazƒ±rla
            hourly_data = {str(i).zfill(2): 0 for i in range(24)}
            
            for _, row in df.iterrows():
                hourly_data[row['hour']] = row['count']
            
            return hourly_data
            
        except Exception as e:
            self.logger.error(f"Hourly distribution hatasƒ±: {e}")
            return {}
    
    def _get_weekly_trend(self):
        """Haftalƒ±k trend verilerini getir"""
        try:
            conn = sqlite3.connect('data/musteri_analiz.db')
            
            # Son 7 g√ºn√ºn verilerini al
            query = """
                SELECT DATE(entry_time) as date, COUNT(*) as count
                FROM visitors 
                WHERE entry_time >= date('now', '-7 days') AND confidence_avg > 0.0
                GROUP BY DATE(entry_time)
                ORDER BY date
            """
            
            df = pd.read_sql_query(query, conn)
            conn.close()
            
            # 7 g√ºnl√ºk veri hazƒ±rla
            weekly_data = []
            for i in range(7):
                date = (datetime.now() - timedelta(days=6-i)).date()
                date_str = str(date)
                
                count = 0
                matching_row = df[df['date'] == date_str]
                if not matching_row.empty:
                    count = matching_row.iloc[0]['count']
                
                weekly_data.append({
                    'date': date_str,
                    'day': date.strftime('%A'),
                    'count': count
                })
            
            return weekly_data
            
        except Exception as e:
            self.logger.error(f"Weekly trend hatasƒ±: {e}")
            return []
    
    def run(self, host='0.0.0.0', port=5000, debug=False):
        """Web uygulamasƒ±nƒ± ba≈ülat"""
        self.logger.info(f"üöÄ Modern Web App ba≈ülatƒ±lƒ±yor: http://{host}:{port}")
        self.socketio.run(self.app, host=host, port=port, debug=debug, allow_unsafe_werkzeug=True)

def main():
    """Ana fonksiyon"""
    app = ModernWebApp()
    app.run()

if __name__ == '__main__':
    main() 